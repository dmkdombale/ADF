{
	"name": "LoadEmpDataDataFlow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "EmployeeCsv",
						"type": "DatasetReference"
					},
					"name": "Employee"
				},
				{
					"dataset": {
						"referenceName": "DimEmp",
						"type": "DatasetReference"
					},
					"name": "DimEmpTable"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DimEmp",
						"type": "DatasetReference"
					},
					"name": "sinkNew"
				},
				{
					"dataset": {
						"referenceName": "DimEmp",
						"type": "DatasetReference"
					},
					"name": "sinkUpdtae"
				},
				{
					"dataset": {
						"referenceName": "DimEmp",
						"type": "DatasetReference"
					},
					"name": "sinkInactive"
				}
			],
			"transformations": [
				{
					"name": "NullFilter"
				},
				{
					"name": "TypeConversionsAndSetAttrs"
				},
				{
					"name": "TypeConversion"
				},
				{
					"name": "LookupIDs"
				},
				{
					"name": "NormNames"
				},
				{
					"name": "ConditionalSplit1"
				},
				{
					"name": "SetAttrsForNew"
				},
				{
					"name": "NameNorm2"
				},
				{
					"name": "checkForChanges"
				},
				{
					"name": "SetAttrsUpdate"
				},
				{
					"name": "SetAttrsInactive"
				},
				{
					"name": "InactiveFields"
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          EmpID as string,",
				"          Region as string,",
				"          Status as string,",
				"          Function as string,",
				"          Level as string,",
				"          Role as string,",
				"          StartDate as string,",
				"          EndDate as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     wildcardPaths:['input/*.csv']) ~> Employee",
				"source(output(",
				"          empId as long,",
				"          surogateKey as long,",
				"          region as string,",
				"          status as string,",
				"          fun as string,",
				"          level as string,",
				"          startDate as timestamp,",
				"          enddate as timestamp,",
				"          processtime as timestamp,",
				"          iscurreent as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DimEmpTable",
				"Employee filter(!isNull(EmpID)) ~> NullFilter",
				"NullFilter derive(EmpID = toInteger(EmpID),",
				"          StartDate = toDate(StartDate, 'mm/dd/yyyy'),",
				"          EndDate = toDate( EndDate, 'MM/dd/yyyy'),",
				"          processtime = currentTimestamp()) ~> TypeConversionsAndSetAttrs",
				"DimEmpTable derive(EmpID = toInteger(empId)) ~> TypeConversion",
				"TypeConversionsAndSetAttrs, TypeConversion lookup(TypeConversionsAndSetAttrs@EmpID == TypeConversion@EmpID,",
				"     multiple: true,",
				"     broadcast: 'auto')~> LookupIDs",
				"LookupIDs select(mapColumn(",
				"          empid = TypeConversionsAndSetAttrs@EmpID,",
				"          Region = Employee@Region,",
				"          Status = Employee@Status,",
				"          EmpFunction = Function,",
				"          Level = Employee@Level,",
				"          Role,",
				"          surogateKey,",
				"          iscurreent,",
				"          StartDate = TypeConversionsAndSetAttrs@StartDate,",
				"          EndDate = TypeConversionsAndSetAttrs@EndDate,",
				"          processtime = TypeConversionsAndSetAttrs@processtime",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> NormNames",
				"NormNames split(isNull(iscurreent),",
				"     disjoint: false) ~> ConditionalSplit1@(NewRow, CheckForUpdate)",
				"ConditionalSplit1@NewRow derive(iscurrent = 1,",
				"          surrogatekey = toString(crc32(empid,EmpFunction))) ~> SetAttrsForNew",
				"ConditionalSplit1@CheckForUpdate select(mapColumn(",
				"          surogateKey,",
				"          iscurreent,",
				"          empid,",
				"          EndDate,",
				"          Status,",
				"          processtime",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> NameNorm2",
				"NameNorm2, TypeConversion exists(NameNorm2@empid==TypeConversion@EmpID,",
				"     negate:false,",
				"     broadcast: 'auto')~> checkForChanges",
				"checkForChanges derive(iscurrent = 1) ~> SetAttrsUpdate",
				"checkForChanges derive(iscurrent = 0) ~> SetAttrsInactive",
				"SetAttrsInactive select(mapColumn(",
				"          empid,",
				"          Status,",
				"          EndDate,",
				"          processtime,",
				"          iscurrent",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> InactiveFields",
				"InactiveFields alterRow(updateIf(true())) ~> alterRow1",
				"SetAttrsForNew sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          empId as long,",
				"          surogateKey as long,",
				"          region as string,",
				"          status as string,",
				"          fun as string,",
				"          level as string,",
				"          startDate as timestamp,",
				"          enddate as timestamp,",
				"          processtime as timestamp,",
				"          iscurreent as boolean",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     batchSize: 50,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          empId = empid,",
				"          surogateKey,",
				"          region = Region,",
				"          status = Status,",
				"          level = Level,",
				"          startDate = StartDate,",
				"          enddate = EndDate,",
				"          processtime,",
				"          iscurreent",
				"     )) ~> sinkNew",
				"SetAttrsUpdate sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          empId as long,",
				"          surogateKey as long,",
				"          region as string,",
				"          status as string,",
				"          fun as string,",
				"          level as string,",
				"          startDate as timestamp,",
				"          enddate as timestamp,",
				"          processtime as timestamp,",
				"          iscurreent as boolean",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     batchSize: 50,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sinkUpdtae",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          empId as long,",
				"          surogateKey as long,",
				"          region as string,",
				"          status as string,",
				"          fun as string,",
				"          level as string,",
				"          startDate as timestamp,",
				"          enddate as timestamp,",
				"          processtime as timestamp,",
				"          iscurreent as boolean",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['empId'],",
				"     format: 'table',",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          empId = empid,",
				"          enddate = EndDate,",
				"          iscurreent = iscurrent,",
				"          processtime",
				"     )) ~> sinkInactive"
			]
		}
	}
}